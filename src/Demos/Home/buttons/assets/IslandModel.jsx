/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 islandModel.gltf 
*/
import * as THREE from 'three';
import { ShaderMaterial, Color, MeshStandardMaterial } from 'three';

import React, { useRef, useEffect, useState } from 'react'
import { useLoader, useThree } from '@react-three/fiber'
import { useGLTF } from '@react-three/drei'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'

const gradientShader = {
  vertexShader: `
    varying vec2 vUv;

    void main() {
      vUv = uv;
      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    }
  `,
  fragmentShader: `
  varying vec2 vUv;

  void main() {
    vec3 color1 = vec3(78.0/255.0, 124.0/255.0, 186.0/255.0);
    vec3 color2 = vec3(180.0/255.0, 110.0/255.0, 198.0/255.0);
    vec3 color = mix(color1, color2, vUv.y*1.3);
    gl_FragColor = vec4(color, 1.0);
  }
`
};

const gradientMaterial = new ShaderMaterial({
  vertexShader: gradientShader.vertexShader,
  fragmentShader: gradientShader.fragmentShader,
});




export function Model({ ...props }) {
  const gltf = useLoader(GLTFLoader, '/islandModel.gltf');
  const { nodes } = gltf;

  const [isHovered, setIsHovered] = useState(false);

  const material = new MeshStandardMaterial({ color: 0xFFFFFF, metalness: 0.1, reflectivity: 1 });
  const bodyMaterial = new MeshStandardMaterial({ color: 0x4E7CBA, metalness: .1, reflectivity: 1 });

  const { gl } = useThree();

  useEffect(() => {


    console.log('isHovered', isHovered)
    const onClick = (e) => {
      console.log('isHovered', isHovered, e)
      if (isHovered) {
        window.location.href = '/3d-island'
      }
    }

    window.addEventListener('click', onClick)

    return () => {
      window.removeEventListener('click', onClick)
    }
  }, [isHovered])

  useEffect(() => {
    if (isHovered) {
      gl.domElement.style.cursor = 'pointer';
    } else {
      gl.domElement.style.cursor = 'auto';
    }
  }, [isHovered, gl]);

  useEffect(() => {
    console.log(`Hover state changed: ${isHovered}`);
  }, [isHovered]);


  return (
    <group {...props} dispose={null} >
      <group position={[4.35, -2.6, isHovered ? -1.2 : -1.6]} scale={[-0.011, 0.011, 0.011]}
        onPointerOver={() => setIsHovered(true)}
        onPointerOut={() => setIsHovered(false)}
      >
        <mesh geometry={nodes.mesh_18.geometry} material={material} position={[0, 0, 114.263]} />
        {/*Letters*/}
        <mesh geometry={nodes.mesh_1.geometry} material={material} position={[0, 0, 114.262]} />
        <mesh geometry={nodes.mesh_2.geometry} material={material} position={[0, 0, 114.261]} />
        <mesh geometry={nodes.mesh_3.geometry} material={material} position={[0, 0, 114.263]} />
        <mesh geometry={nodes.mesh_4.geometry} material={material} position={[0, 0, 114.263]} />
        <mesh geometry={nodes.mesh_5.geometry} material={material} position={[0, 0, 114.263]} />
        <mesh geometry={nodes.mesh_6.geometry} material={material} position={[0, 0, 114.263]} />
        <mesh geometry={nodes.mesh_7.geometry} material={material} position={[0, 0, 114.263]} />
        <mesh geometry={nodes.mesh_8.geometry} material={material} position={[0, 0, 114.261]} />
        <mesh geometry={nodes.mesh_9.geometry} material={material} position={[0, 0, 114.261]} />
        <mesh geometry={nodes.mesh_10.geometry} material={material} position={[0, 0, 114.263]} />
        <mesh geometry={nodes.mesh_11.geometry} material={material} position={[0, 0, 114.264]} />
        <mesh geometry={nodes.mesh_12.geometry} material={material} position={[0, 0, 114.263]} />
        <mesh geometry={nodes.mesh_13.geometry} material={material} position={[0, 0, 114.262]} />
        <mesh geometry={nodes.mesh_14.geometry} material={material} position={[0, 0, 114.263]} />
        <mesh geometry={nodes.mesh_15.geometry} material={material} position={[0, 0, 114.263]} />
        <group position={[0, 0, 114.263]}>
          <mesh geometry={nodes.mesh_16.geometry} material={material} />
          <mesh geometry={nodes.mesh_17.geometry} material={material} />
        </group>
        <mesh geometry={nodes.mesh_19.geometry} material={nodes.mesh_19.material} position={[0, 0, 114.189]} />
        <mesh geometry={nodes.mesh_20.geometry} material={nodes.mesh_20.material} position={[0, 0, 114.243]} />
        <mesh geometry={nodes.mesh_21.geometry} material={nodes.mesh_21.material} position={[0, 0, 139.836]} />
        <mesh geometry={nodes.mesh_22.geometry} material={nodes.mesh_22.material} position={[0, 0, 139.836]} />
        <mesh geometry={nodes.mesh_23.geometry} material={nodes.mesh_23.material} position={[0, 0, 139.836]} />
        <mesh geometry={nodes.mesh_24.geometry} material={nodes.mesh_24.material} position={[0, 0, 139.836]} />
        <mesh geometry={nodes.mesh_25.geometry} material={nodes.mesh_25.material} position={[0, 0, 139.836]} />
        <mesh geometry={nodes.mesh_26.geometry} material={nodes.mesh_26.material} position={[0, 0, 139.836]} />
        <mesh geometry={nodes.mesh_27.geometry} material={gradientMaterial} position={[0, 0, 189.16]} />
        <group position={[0, 0, 189.161]}>
          <mesh geometry={nodes.mesh_28.geometry} material={gradientMaterial} scale={[1, 1, 0.864]} />
        </group>
        <mesh geometry={nodes.mesh_29.geometry} material={gradientMaterial} position={[0, 0, 189.162]} />
        <mesh geometry={nodes.mesh_30.geometry} material={gradientMaterial} position={[0, 0, 189.163]} />
        <mesh geometry={nodes.mesh_31.geometry} material={gradientMaterial} position={[0, 0, 189.16]} />
        <group position={[0, 0, 189.162]}>
          <mesh geometry={nodes.mesh_32.geometry} material={gradientMaterial} />
          <mesh geometry={nodes.mesh_33.geometry} material={gradientMaterial} />
        </group>
        <mesh geometry={nodes.mesh_34.geometry} material={gradientMaterial} position={[0, 0, 189.162]} />
        <mesh geometry={nodes.mesh_35.geometry} material={gradientMaterial} position={[0, 0, 189.162]} />
        <mesh geometry={nodes.mesh_36.geometry} material={gradientMaterial} position={[0, 0, 189.162]} />
        <mesh geometry={nodes.mesh_37.geometry} material={gradientMaterial} position={[0, 0, 189.162]} />
        <mesh geometry={nodes.mesh_0.geometry} material={bodyMaterial} />
      </group>
    </group>
  )
}

useGLTF.preload('/islandModel.gltf')
